#include "BluetoothSerial.h"
#include <ESP32Servo.h>

String nome_dispositivo = "ESP32-grupo 5";

// Pinos dos LEDs
const int pinLedVermelho = 15;
const int pinLedVerde = 4;
const int pinBuzzer = 13;
const int pinLDR = 14;
const int pinTEMP = 34;
const int pinServo = 25;

Servo servoMotor; // Objeto Servo

// Verifica se o Bluetooth está habilitado
#if !defined(CONFIG_BT_ENABLED) || !defined(CONFIG_BLUEDROID_ENABLED)
#error Bluetooth não está habilitado! Por favor, execute make menuconfig para habilitá-lo.
#endif

// Verifica se o Bluetooth Serial está disponível e habilitado
#if !defined(CONFIG_BT_SPP_ENABLED)
#error Bluetooth Serial não disponível ou não habilitado. Disponível apenas para o chip ESP32.
#endif

BluetoothSerial SerialBT;

void setup() {
  Serial.begin(115200);
  SerialBT.begin(nome_dispositivo);  // Nome do dispositivo Bluetooth
  Serial.printf("Dispositivo com nome \"%s\" iniciado.\nAgora você pode pareá-lo com o Bluetooth!\n", nome_dispositivo.c_str());

  // Configura os pinos dos LEDs como saída
  pinMode(pinLedVermelho, OUTPUT);
  pinMode(pinLedVerde, OUTPUT);
  pinMode(pinBuzzer, OUTPUT);
  pinMode(pinLDR, INPUT);
  pinMode(pinTEMP, INPUT);
  servoMotor.attach(pinServo);

  // Inicializa os LEDs desligados
  digitalWrite(pinLedVermelho, LOW);
  digitalWrite(pinLedVerde, LOW);

}

void loop() {
  // Lê dados do Serial e envia para o Bluetooth
  if (Serial.available()) {
    SerialBT.write(Serial.read());
  }
  // Lê dados do Bluetooth e envia para o Serial
  if (SerialBT.available()) {
    String data = SerialBT.readStringUntil('\n');
    data.trim();         // Remove espaços em branco no início e no final da string
    data.toLowerCase();  // Converte a string para minúsculas

    // Controla os LEDs com base nos comandos recebidos
    if (data == "ledvd_l") {
      digitalWrite(pinLedVerde, HIGH);
      Serial.println("LED verde ligado.");
    } else if (data == "ledvd_d") {
      digitalWrite(pinLedVerde, LOW);
      Serial.println("LED verde desligado.");
    } else if (data == "ledve_l") {
      digitalWrite(pinLedVermelho, HIGH);
      Serial.println("LED vermelho ligado.");
    } else if (data == "ledve_d") {
      digitalWrite(pinLedVermelho, LOW);
      Serial.println("LED vermelho desligado.");
    } else if (data == "buzzer") {
      Serial.println("Buzzer ligado.");
      tone(pinBuzzer, 349);
      delay(1000);
      noTone(pinBuzzer);
    } else if (data == "ldr") {
      int valorLDR = analogRead(pinLDR);
      Serial.print("Valor do sensor LDR: ");
      Serial.println(valorLDR);
    } else if (data == "temp") {
      int valorTEMP = analogRead(pinTEMP);
      Serial.print("Valor do sensor de Temperatura: ");
      Serial.println(valorTEMP);
    } else if (data == "servoesq") {
      Serial.println("Movendo servo para a esquerda");
      servoMotor.write(0); // Define a posição do servo para 0 graus (esquerda)
    } else if (data == "servodir") {
      Serial.println("Movendo servo para a direita");
      servoMotor.write(180); // Define a posição do servo para 180 graus (direita)
    } else if (data == "servorep") {
      Serial.println("Movendo servo para a posição de repouso");
      servoMotor.write(90); // Define a posição do servo para 180 graus (direita)
    }
  } 
  delay(20);  // Pequena pausa para estabilidade
}
